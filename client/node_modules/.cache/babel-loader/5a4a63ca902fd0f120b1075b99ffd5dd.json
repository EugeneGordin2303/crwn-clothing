{"ast":null,"code":"import { gql } from 'apollo-boost';\nimport { addItemToCart, removeItemFromCart, clearItemFromCart, getCartTotal, getCartItemCount } from './cart.utils';\nexport const typeDefs = gql`\n    extend type Item {\n      quantity: Int\n    }\n    extend type DateTime {\n      nanoseconds: Int!\n      seconds: Int!\n    }\n    extend type User {\n      id: ID!\n      displayName: String!\n      email: String!\n      createdAt: DateTime!\n    }\n    extend type Mutation {\n      ToggleCartHidden: Boolean!\n      AddItemToCart(item: Item!): [Item]!\n      SetCurrentUser(user: User!): User!\n      RemoveItemFromCart(item: Item!): [Item]!\n      ClearItemFromCart(item: Item!): [Item]!\n    }\n  `;\nconst GET_CART_HIDDEN = gql`\n    {\n      cartHidden @client\n    }\n  `;\nconst GET_ITEM_COUNT = gql`\n    {\n      itemCount @client\n    }\n  `;\nconst GET_CART_TOTAL = gql`\n    {\n      cartTotal @client\n    }\n  `;\nconst GET_CART_ITEMS = gql`\n    {\n      cartItems @client\n    }\n  `;\nconst GET_CURRENT_USER = gql`\n    {\n      currentUser @client\n    }\n  `;\n\nconst updateCartItemsRelatedQueries = (cache, newCartItems) => {\n  cache.writeQuery({\n    query: GET_ITEM_COUNT,\n    data: {\n      itemCount: getCartItemCount(newCartItems)\n    }\n  });\n  cache.writeQuery({\n    query: GET_CART_TOTAL,\n    data: {\n      cartTotal: getCartTotal(newCartItems)\n    }\n  });\n  cache.writeQuery({\n    query: GET_CART_ITEMS,\n    data: {\n      cartItems: newCartItems\n    }\n  });\n};\n\nexport const resolvers = {\n  Mutation: {\n    toggleCartHidden: (_root, _args, {\n      cache\n    }) => {\n      const {\n        cartHidden\n      } = cache.readQuery({\n        query: GET_CART_HIDDEN\n      });\n      cache.writeQuery({\n        query: GET_CART_HIDDEN,\n        data: {\n          cartHidden: !cartHidden\n        }\n      });\n      return !cartHidden;\n    },\n    addItemToCart: (_root, {\n      item\n    }, {\n      cache\n    }) => {\n      const {\n        cartItems\n      } = cache.readQuery({\n        query: GET_CART_ITEMS\n      });\n      const newCartItems = addItemToCart(cartItems, item);\n      updateCartItemsRelatedQueries(cache, newCartItems);\n      return newCartItems;\n    },\n    removeItemFromCart: (_root, {\n      item\n    }, {\n      cache\n    }) => {\n      const {\n        cartItems\n      } = cache.readQuery({\n        query: GET_CART_ITEMS\n      });\n      const newCartItems = removeItemFromCart(cartItems, item);\n      updateCartItemsRelatedQueries(cache, newCartItems);\n      return newCartItems;\n    },\n    clearItemFromCart: (_root, {\n      item\n    }, {\n      cache\n    }) => {\n      const {\n        cartItems\n      } = cache.readQuery({\n        query: GET_CART_ITEMS\n      });\n      const newCartItems = clearItemFromCart(cartItems, item);\n      updateCartItemsRelatedQueries(cache, newCartItems);\n      return newCartItems;\n    },\n    setCurrentUser: (_root, {\n      user\n    }, {\n      cache\n    }) => {\n      cache.writeQuery({\n        query: GET_CURRENT_USER,\n        data: {\n          currentUser: user\n        }\n      });\n      return user;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/eugene/Desktop/react/crwn-clothing/src/graphql/resolvers.js"],"names":["gql","addItemToCart","removeItemFromCart","clearItemFromCart","getCartTotal","getCartItemCount","typeDefs","GET_CART_HIDDEN","GET_ITEM_COUNT","GET_CART_TOTAL","GET_CART_ITEMS","GET_CURRENT_USER","updateCartItemsRelatedQueries","cache","newCartItems","writeQuery","query","data","itemCount","cartTotal","cartItems","resolvers","Mutation","toggleCartHidden","_root","_args","cartHidden","readQuery","item","setCurrentUser","user","currentUser"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\n\nimport {\n    addItemToCart,\n    removeItemFromCart,\n    clearItemFromCart,\n    getCartTotal,\n    getCartItemCount\n  } from './cart.utils';\n  \n  export const typeDefs = gql`\n    extend type Item {\n      quantity: Int\n    }\n    extend type DateTime {\n      nanoseconds: Int!\n      seconds: Int!\n    }\n    extend type User {\n      id: ID!\n      displayName: String!\n      email: String!\n      createdAt: DateTime!\n    }\n    extend type Mutation {\n      ToggleCartHidden: Boolean!\n      AddItemToCart(item: Item!): [Item]!\n      SetCurrentUser(user: User!): User!\n      RemoveItemFromCart(item: Item!): [Item]!\n      ClearItemFromCart(item: Item!): [Item]!\n    }\n  `;\n  \n  const GET_CART_HIDDEN = gql`\n    {\n      cartHidden @client\n    }\n  `;\n  \n  const GET_ITEM_COUNT = gql`\n    {\n      itemCount @client\n    }\n  `;\n  \n  const GET_CART_TOTAL = gql`\n    {\n      cartTotal @client\n    }\n  `;\n  \n  const GET_CART_ITEMS = gql`\n    {\n      cartItems @client\n    }\n  `;\n  \n  const GET_CURRENT_USER = gql`\n    {\n      currentUser @client\n    }\n  `;\n  \n  const updateCartItemsRelatedQueries = (cache, newCartItems) => {\n    cache.writeQuery({\n      query: GET_ITEM_COUNT,\n      data: { itemCount: getCartItemCount(newCartItems) }\n    });\n  \n    cache.writeQuery({\n      query: GET_CART_TOTAL,\n      data: { cartTotal: getCartTotal(newCartItems) }\n    });\n  \n    cache.writeQuery({\n      query: GET_CART_ITEMS,\n      data: { cartItems: newCartItems }\n    });\n  };\n  \n  export const resolvers = {\n    Mutation: {\n      toggleCartHidden: (_root, _args, { cache }) => {\n        const { cartHidden } = cache.readQuery({\n          query: GET_CART_HIDDEN\n        });\n  \n        cache.writeQuery({\n          query: GET_CART_HIDDEN,\n          data: { cartHidden: !cartHidden }\n        });\n  \n        return !cartHidden;\n      },\n  \n      addItemToCart: (_root, { item }, { cache }) => {\n        const { cartItems } = cache.readQuery({\n          query: GET_CART_ITEMS\n        });\n  \n        const newCartItems = addItemToCart(cartItems, item);\n  \n        updateCartItemsRelatedQueries(cache, newCartItems);\n  \n        return newCartItems;\n      },\n  \n      removeItemFromCart: (_root, { item }, { cache }) => {\n        const { cartItems } = cache.readQuery({\n          query: GET_CART_ITEMS\n        });\n  \n        const newCartItems = removeItemFromCart(cartItems, item);\n  \n        updateCartItemsRelatedQueries(cache, newCartItems);\n  \n        return newCartItems;\n      },\n  \n      clearItemFromCart: (_root, { item }, { cache }) => {\n        const { cartItems } = cache.readQuery({\n          query: GET_CART_ITEMS\n        });\n  \n        const newCartItems = clearItemFromCart(cartItems, item);\n  \n        updateCartItemsRelatedQueries(cache, newCartItems);\n  \n        return newCartItems;\n      },\n  \n      setCurrentUser: (_root, { user }, { cache }) => {\n        cache.writeQuery({\n          query: GET_CURRENT_USER,\n          data: { currentUser: user }\n        });\n  \n        return user;\n      }\n    }\n  };"]},"metadata":{},"sourceType":"module"}